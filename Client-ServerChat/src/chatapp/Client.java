/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapp;

import com.sun.xml.internal.ws.util.StringUtils;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.WindowEvent;

import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.layout.Border;
import javax.imageio.ImageIO;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 *
 * @author mayank
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public Client()  {
        initComponents();   
       getContentPane().setBackground(new Color(0,48,135)); 
        Enumeration e;
        try {
            e = NetworkInterface.getNetworkInterfaces();
            while(e.hasMoreElements())
            {
                NetworkInterface n = (NetworkInterface) e.nextElement();
                Enumeration ee = n.getInetAddresses();
                while (ee.hasMoreElements()){
                    InetAddress i = (InetAddress) ee.nextElement();
                    if(i instanceof Inet4Address){                      
                        System.out.println(i.getHostAddress());
                        ipAdresses.addItem(i.getHostAddress());  
                    }
                }
            }
        } catch (SocketException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
       
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        friendName = new javax.swing.JTextField();
        addFriend = new javax.swing.JButton();
        friendsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        display_friends_list = new javax.swing.JList<>();
        refreshButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        JChatPort = new javax.swing.JTextField();
        LogIn = new javax.swing.JButton();
        ipAdresses = new javax.swing.JComboBox<>();
        serverIpAddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(113, 119, 222));

        friendName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendNameActionPerformed(evt);
            }
        });

        addFriend.setText("Add Friend");
        addFriend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addFriendMouseClicked(evt);
            }
        });

        friendsLabel.setForeground(new java.awt.Color(254, 254, 254));
        friendsLabel.setText("Friends:");

        display_friends_list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        display_friends_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                display_friends_listMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(display_friends_list);

        refreshButton.setForeground(new java.awt.Color(1, 1, 1));
        refreshButton.setText("R");
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        username.setText("User Name");
        username.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameMouseClicked(evt);
            }
        });
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        password.setText("jPassword");
        password.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordMouseClicked(evt);
            }
        });

        JChatPort.setText("Port Here");
        JChatPort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JChatPortMouseClicked(evt);
            }
        });
        JChatPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JChatPortActionPerformed(evt);
            }
        });

        LogIn.setText("LogIn");
        LogIn.setBackground(new Color(255,166,51));
        LogIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogInMouseClicked(evt);
            }
        });
        LogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogInActionPerformed(evt);
            }
        });

        serverIpAddress.setText("localhost");
        serverIpAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                serverIpAddressFocusLost(evt);
            }
        });
        serverIpAddress.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                serverIpAddressPropertyChange(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(220, 47, 47));
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setText("Username");

        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setText("Password");

        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("Client Port");

        jLabel4.setForeground(new java.awt.Color(248, 248, 248));
        jLabel4.setText("Client IP");

        jLabel5.setForeground(new java.awt.Color(254, 254, 254));
        jLabel5.setText("Server IP");

        jLabel6.setFont(new java.awt.Font("Limelight", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 102));
        jLabel6.setText("WELCOME TO MCHAT");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(username)
                            .addComponent(LogIn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(password, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JChatPort, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipAdresses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(serverIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addFriend, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(friendName)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(friendsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(friendsLabel)
                            .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JChatPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ipAdresses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(serverIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LogIn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(friendName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addFriend)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    
    private void ClearFriendList() {
        DefaultListModel listModel = (DefaultListModel) display_friends_list.getModel();
        listModel.clear();
    }
    
    
        
    public class SelectedListCellRenderer extends DefaultListCellRenderer {
        @Override
     public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
         Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
         if (isSelected) {
             c.setBackground(new Color(39,167,112));
         }
         
         if (value.toString().contains("-A")) setBackground(new Color(83,215,105));
         else setBackground(new Color(255,255,255));
       
         return c;
     }
}
    
    void RefreshFriendList(){ 
        Socket s;
        try {
            s = new Socket(serverIp,authServerPort);
           
            din = new DataInputStream(s.getInputStream());
            dout = new DataOutputStream(s.getOutputStream());
            String sendRequest = "RefreshFriends"+":"+client;
            dout.writeUTF(sendRequest);
            s.setSoTimeout(500);
            String read = din.readUTF();
            String list[] = read.split(":");
            System.out.println("List is"+ Arrays.toString(list));
            int i =0;
            display_friends_list.setCellRenderer(new SelectedListCellRenderer());
            final DefaultListModel model = new DefaultListModel();
            for(String name: list){    
                model.add(i, name);
                System.out.println(name +  "->");
                i++;
            }
            display_friends_list.setModel(model);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Connection Timed Out");
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }
    
    
    int RequestPort(String name){
        
        if(name.contains("-")){
            name= name.split("-")[0];
        }
        
        try {
                Socket s = new Socket(serverIp,authServerPort);
                String msg = "RequestPort"+ ":" + name;
                dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF(msg);
                System.out.println("data sent");
                
                din = new DataInputStream(s.getInputStream());
                String portMsg = din.readUTF();
                
                System.out.println("Sent port no is "+ portMsg);
                s.close();
                return Integer.parseInt(portMsg);      
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }     
        return -1;
    }
 
     String RequestIP(String name){
        
        if(name.contains("-")){
            name= name.split("-")[0];
        }
        
        try {
                Socket s = new Socket(serverIp,authServerPort);
                String msg = "RequestIP"+ ":" + name;
                dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF(msg);
                System.out.println("data sent");
                
                din = new DataInputStream(s.getInputStream());
                String ipMsg = din.readUTF();
                
                System.out.println("************Sent IP from server is "+ ipMsg);
                s.close();
                return ipMsg;      
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }     
        return "";
    }
    
    private void addFriendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addFriendMouseClicked
        // TODO add your handling code here:    
            if(client.equals("")){
                JOptionPane.showMessageDialog(null, "LogIn First");
                return ;
            }
            try {
                Socket s = new Socket(serverIp,authServerPort);
                String msg = "AddFriend"+ ":" +client +":" + friendName.getText().toString();
                dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF(msg);
                System.out.println("data sent");
                din = new DataInputStream(s.getInputStream());
                String read = din.readUTF();
                String sRead[] = read.split(":");
                if(sRead[1].equals("0")){
                    System.out.println("friend added successfuly");
                    JOptionPane.showMessageDialog(null, "Friend Added Successfully");
                }
                else if(sRead[1].equals("2")){
                    System.out.println("friend already added ");
                    JOptionPane.showMessageDialog(null, "Friend Already Added");
                }
                else if(sRead[1].equals("4")){
                    System.out.println("User not found");
                    JOptionPane.showMessageDialog(null, "User Not Found");
                }
                s.close();
                
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_addFriendMouseClicked

    
    boolean onlineTest(String name){
          try {
                Socket s = new Socket(serverIp,authServerPort);
                String msg = "OnlineTest"+ ":" + name;
                dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF(msg);
                System.out.println("friend online test request send");
                
                din = new DataInputStream(s.getInputStream());
                String read = din.readUTF();
                System.out.println("read is from online test"+read);
                String re[] = read.split(":");
                if(re[0].equals("Available")){
                     System.out.println("Friend is available-------->"+ re[1]);
                    return true;
                 
                }
                else if(read.equals("Unavailable")){
                    System.out.println("Friend is Unavailable");
                    return false;
                }
                s.close();
                
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
          return false;
        
    }
    
    private void friendNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_friendNameActionPerformed

    private void display_friends_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_display_friends_listMouseClicked
        // TODO add your handling code here:
 
        String selected = display_friends_list.getSelectedValue();
        openNewDisplay(selected);
    }//GEN-LAST:event_display_friends_listMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        // TODO add your handling code here:
        RefreshFriendList();
    }//GEN-LAST:event_refreshButtonMouseClicked

    private void LogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LogInActionPerformed

    private void LogInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogInMouseClicked
        // TODO add your handling code here:
        String name = username.getText().toString();
        String passd = password.getText().toString();
        if(LogIn.getText().equals("Log Out"))
        {
            try {

                LogIn.setText("Log In");
                Socket s = new Socket(serverIp,authServerPort);
                dout = new DataOutputStream(s.getOutputStream());
                String msg = "LogOut:"+client;
                dout.writeUTF(msg);
                ClearFriendList();
                s.close();
                t1.stop();

                chatSocket.close();

                username.setText("Username");
                password.setText("Password");
                JChatPort.setText("Enter Port Here");

                for (ChatBox cb : chatBoxRecord.values()){
                    cb.dispatchEvent(new WindowEvent(cb, WindowEvent.WINDOW_CLOSING));
                }
                client= "";
                return;
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        System.out.println("clicked");
      

        if(name.equals("") || passd.equals("")){
            System.out.println("Log In Failed");
            JOptionPane.showMessageDialog(null, "Username and Password can't be empty");
            return;
        }
        else{
            
            try{
                  int number = Integer.parseInt(JChatPort.getText());
              }
              catch (NumberFormatException n){
                  JOptionPane.showMessageDialog(null, "Enter Port number");
                  return ;
              }
            System.out.println("Trying Log In");
            try {
                Socket s = new Socket(serverIp,authServerPort);
                System.err.println("Selected server is " + ipAdresses.getSelectedItem());
                String msg = "Auth"+ ":" +name +":" + passd + ":" + ipAdresses.getSelectedItem() +":"+Integer.parseInt(JChatPort.getText().toString());
                dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF(msg);
                System.out.println("data sent");

                din = new DataInputStream(s.getInputStream());
                String read = din.readUTF();

                if(read.equals("Valid")){
                    clientChatPort();
                    System.err.println("Valid User"+ client);
                    LogIn.setText("Log Out");
                    client = name;
                    System.out.println("Client is Mr:"+client);
                    JOptionPane.showMessageDialog(null, "Logged In Successfully");
//                    RefreshFriendList();
                }
                else{
                    System.err.println("In Valid User"+ client);
                }
                s.close();
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Connection Timed Out");
            }
        }

    }//GEN-LAST:event_LogInMouseClicked

    private void JChatPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JChatPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JChatPortActionPerformed

    private void JChatPortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JChatPortMouseClicked
        // TODO add your handling code here:
        JChatPort.setText("");
    }//GEN-LAST:event_JChatPortMouseClicked

    private void passwordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordMouseClicked
        // TODO add your handling code here:
        password.setText("");
    }//GEN-LAST:event_passwordMouseClicked

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void usernameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameMouseClicked
        // TODO add your handling code here:
        username.setText("");
    }//GEN-LAST:event_usernameMouseClicked

    private void serverIpAddressPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_serverIpAddressPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_serverIpAddressPropertyChange

    private void serverIpAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_serverIpAddressFocusLost
        // TODO add your handling code here:
        System.err.println("Initial server ip: " + serverIp);
        serverIp = serverIpAddress.getText().toString();
        System.err.println("Change in server ip: " + serverIp);
    }//GEN-LAST:event_serverIpAddressFocusLost

    
    void openNewDisplay(String selected){
        
        
        ChatBox c = new ChatBox();
        c.addWindowListener(new WindowListener() {
            

            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println("Closing Winodw  client Name " + c.clientName + " firned Name :"+ c.friendName);
                if(chatBoxRecord.get(c.friendName.split("-")[0]) != null){
                    System.out.println("Firend is available in chat Box Record list");
                }
                chatBoxRecord.remove(c.friendName.split("-")[0]);
                System.err.println("Successfully removed -> " + c.friendName);
            }

            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
           }

            @Override
            public void windowDeiconified(WindowEvent e) {
           }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
           }

        });
        
        System.out.println("sELCTED ONE IS "+ selected);
       
        System.out.println("Online Test results -> "+ onlineTest(selected));
        if(!onlineTest(selected)){
            System.out.println("Frirnd not found online");
            JOptionPane.showMessageDialog(null, "Friend "+ selected + " not avaiable");
            RefreshFriendList();
            return;
            
        }
        
        
        System.out.println("Frirnd found online going further");
        
        if(selected.contains("-")){
            if(chatBoxRecord.get(selected.split("-")[0]) != null){
                JOptionPane.showMessageDialog(null, "Window for "+ selected +"already opened");
                return;
            }
            
            chatBoxRecord.put(selected.split("-")[0],c);
            System.out.println("contains - new list "+ chatBoxRecord.values());
        }
        else{
            if(chatBoxRecord.get(selected.split("-")[0]) != null){
                JOptionPane.showMessageDialog(null, "Window for "+ selected +"already opened");
                return;
            }
        }
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                c.setClientName(client);
                String ip = RequestIP(selected.split("-")[0]);
                c.setIPAddress(ip);
                c.setFriendName(selected);
                c.setVisible(true);
                int port = RequestPort(selected.split("-")[0]);
                c.setFriendPort(port);
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    void clientChatPort(){
        System.err.println("---------Chat Server started");
        try {
            chatSocket = new ServerSocket(Integer.parseInt(JChatPort.getText().toString()));
            System.err.println("Strting chat at : "+ JChatPort.getText().toString());
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    DataInputStream din = null;
                    while(true){ 
                        try {
//                            ClearFriendList();
//                            RefreshFriendList();
                            System.out.println("New Winodw trying acceoting");
                            Socket s = chatSocket.accept();
                            System.out.println("New Winodw acceoted");
                            din = new DataInputStream(s.getInputStream());
                            String msg = din.readUTF();
                            System.out.println("Message Received is "+ msg);
                            String sender = msg.split(":")[0];
                            String from = msg.split(":")[1]; 
                            String message = msg.split(":")[2];
                            System.out.println("Sender : " + sender);
                            System.out.println("From : " + from);
                            System.out.println("Message : " + message);
                            for(String key: chatBoxRecord.keySet()){
                                System.out.println("-----Key is "+ key);
                                System.out.println("-----Object is "+ chatBoxRecord.get(key).friendName);
                            }
                            System.out.println("Searching for " + sender.split("-")[0]);
                            
                            try {
                                if(chatBoxRecord.get(sender.split("-")[0]) == null){
                                    openNewDisplay(sender+"-A");
                                    System.out.println(""+ chatBoxRecord.entrySet());
                                }
                                if(chatBoxRecord.get(sender.split("-")[0]) != null)
                                    chatBoxRecord.get(sender.split("-")[0]).printMessage(sender, message);
                                else
                                    System.out.println("Coresponding record box object not found seacghig for" + sender);
                            } catch (BadLocationException ex) {
                                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            System.out.println("Found");
                            s.close();
                        } catch (IOException ex) {
                            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            try {
                                if(din != null)
                                    din.close();
                            } catch (IOException ex) {
                                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            };
            t1 = new Thread(r);
            t1.start();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JChatPort;
    private javax.swing.JButton LogIn;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addFriend;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JList<String> display_friends_list;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField friendName;
    private javax.swing.JLabel friendsLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox<String> ipAdresses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPasswordField password;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton refreshButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField serverIpAddress;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
    private int authServerPort = 6544;
    private int chatPort = 6524;
    private DataOutputStream dout;
    private DataInputStream din;
    private String client=""; 
    
    ServerSocket chatSocket;
    HashMap<String, ChatBox> chatBoxRecord = new HashMap<>();
    String serverIp = "localhost";
    Thread t1;
}
