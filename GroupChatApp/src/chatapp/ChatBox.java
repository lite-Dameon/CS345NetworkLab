/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapp;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

/**
 *
 * @author mayank
 */
public class ChatBox extends javax.swing.JFrame {

    /**
     * Creates new form ChatBox
     */
    public ChatBox() {
        initComponents();
        messageArea.setToolTipText("Enter Message Here");
        allMessageArea.setEditable(false);
        messageArea.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e)
            {
              if (e.getKeyCode() == KeyEvent.VK_ENTER)
              {
                  broadCastMessage();
              }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        sendMessage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        connectedTo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        allMessageArea = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        messageArea.setColumns(20);
        messageArea.setRows(5);
        messageArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageAreaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(messageArea);

        sendMessage.setText("Send");
        sendMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMessageMouseClicked(evt);
            }
        });

        jLabel1.setText("Connected To  : ");

        connectedTo.setText("Friend Name");

        allMessageArea.setBackground(new java.awt.Color(254, 242, 242));
        jScrollPane3.setViewportView(allMessageArea);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileMenuMouseClicked(evt);
            }
        });

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(connectedTo, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(sendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(connectedTo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(sendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void sendMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMessageMouseClicked
        broadCastMessage();
    }//GEN-LAST:event_sendMessageMouseClicked

    private void fileMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMenuMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuMouseClicked

    private void messageAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageAreaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageAreaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatBox().setVisible(true);
            }
        });
    }

    void printMessage(String from, String message) throws BadLocationException{
        System.out.println("Client called me");
        String msg = from+" : "+ message+"\n";
        SimpleAttributeSet keyWord = new SimpleAttributeSet();
        allMessageArea.setBackground(new Color(230,230,230));
   
        if(from.equals(clientName)){
            StyleConstants.setForeground(keyWord, new Color(219,0,17));
               
            StyleConstants.setAlignment(keyWord, StyleConstants.ALIGN_RIGHT);
        }
        else{
            StyleConstants.setForeground(keyWord, new Color(9,9,26));
           
            StyleConstants.setAlignment(keyWord, StyleConstants.ALIGN_LEFT); 
        }
        
        allMessageArea.getStyledDocument().insertString(allMessageArea.getStyledDocument().getLength(),msg,keyWord); 
    }
    
    void sendMessage(String ipAddress,int friendPort,String message) throws BadLocationException{
        if(message.equals(""))
        {
            System.out.println("Empty text not allowed");
            JOptionPane.showMessageDialog(null, "Empty Message not allowed");     
            return ;
        }
        try {
            Socket s = new Socket(ipAddress, friendPort);
            System.out.println("Socket created on port no " + friendPort);
            DataOutputStream dout = new DataOutputStream(s.getOutputStream());
            // add message from the text area
            
            String msg = clientName+":"+ friendName + ":"+ message;
            System.out.println(msg);       
            dout.writeUTF(msg);
            System.out.println("Message successfully received");
            s.close();
            messageArea.setText("");
        } catch (IOException ex) {
            Logger.getLogger(ChatBox.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }
    
    
    void broadCastMessage(){
        String message = messageArea.getText().toString();
//        try {
//            printMessage(clientName,messageArea.getText().toString());
//        } catch (BadLocationException ex) {
//            Logger.getLogger(ChatBox.class.getName()).log(Level.SEVERE, null, ex);
//        }
        System.err.println("Size of ip array list is " + members.size());
        String ip = members.get(0);
            System.err.println("Sending message to " + ip + " --> " + message);
            String ipAddress = ip.split(":")[0];
            int port = Integer.parseInt(ip.split(":")[1]);
            
            try {
                System.err.println("Message in message text area "+messageArea.getText().toString());
                sendMessage(ipAddress, port,message);
            } catch (BadLocationException ex) {
                System.out.println("Message not sent successfuly for " + ip);
                Logger.getLogger(ChatBox.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }
    
    
//    void setIPAddress(String str){
//        ipAddress = str;
//        
//    }
    
    void setFriendName(String str){
        friendName = str;
        connectedTo.setText(str);
    }
    
    void setClientName(String str){
        clientName = str;
    }
    
//    void setFriendPort(int port){
//        friendPort = port;
//    }
//    
    void setMembers(String str){
        System.out.println("Setting members of chatbox MEMBERS** :-: " + str);
        String mems[] = str.split("\\$");
        members.clear();
        for(String s: mems){
            System.out.println("Adding : " + s);
            members.add(s);
        }
        System.out.println("Members setup successful");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTextPane allMessageArea;
    private javax.swing.JLabel connectedTo;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton sendMessage;
    // End of variables declaration//GEN-END:variables
//    String ipAddress = "";
    String friendName = "";
    String clientName  ="";
//    int friendPort = 0 ;
    // array list will only contain a single address i.e. of master only
    ArrayList<String> members = new ArrayList<>();
}
